ANGULAR NOTES
============

1. BASICS

• Angular is a TypeScript-based open-source framework
• Developed and maintained by Google
• Used for building single-page applications (SPA)
• Follows MVC (Model-View-Controller) pattern
• Built with TypeScript, offering strong typing and OOP features

2. KEY COMPONENTS

• Components - Basic building blocks of UI
• Modules - Container for related components
• Services - Business logic and data sharing
• Directives - DOM manipulation
• Pipes - Data transformation
• Guards - Route protection
• Interceptors - HTTP request/response handling
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
})

4. IMPORTANT DECORATORS

• @Component
• @Injectable
• @Input
• @Output
• @NgModule

5. DATA BINDING

• Interpolation: {{ value }}
• Property Binding: [property]="value"
• Event Binding: (event)="handler()"
• Two-way Binding: [(ngModel)]="value"

6. DIRECTIVES

• *ngIf - Conditional rendering
• *ngFor - Iteration
• ngClass - Dynamic classes
• ngStyle - Dynamic styles

7. LIFECYCLE HOOKS

• ngOnInit()
• ngOnChanges()
• ngOnDestroy()
• ngAfterViewInit()

8. ROUTING

const routes: Routes = [
    { path: '', component: HomeComponent },
    { path: 'about', component: AboutComponent }
]

9. SERVICES & DEPENDENCY INJECTION

@Injectable({
    providedIn: 'root'
})

10. CLI COMMANDS

• ng new [project-name]
• ng serve
• ng generate component
• ng build
• ng test

11. HTTP COMMUNICATION

• HttpClient for API calls
• GET, POST, PUT, DELETE methods
• Observable handling
• Error handling with interceptors

12. FORMS

• Template-driven forms
• Reactive forms
• Form validation
• Form controls & groups

13. STATE MANAGEMENT

• Services for simple state
• NgRx for complex applications
• Store, Actions, Reducers
• Effects for side effects

14. TESTING

• Unit testing with Jasmine
• End-to-end with Protractor
• TestBed configuration
• Component testing
• Service testing

15. OPTIMIZATION

• Lazy loading
• AOT compilation
• Production builds
• Bundle optimization
• Tree shaking

16. SECURITY

• Route Guards
• Content Security Policy
• XSS protection
• CSRF protection
• JWT implementation

17. BEST PRACTICES

• Component composition
• Single responsibility
• DRY principles
• Modular architecture
• Proper error handling

18. DEPLOYMENT

• Build optimization
• Environment configuration
• Server setup
• CI/CD pipeline
• Docker containerization
